@page "/Account/Manage"

@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using GraphiCall.Data;


@inject IServiceProvider ServiceProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor;
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext _context

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm id="profile-form" Model="Input" FormName="profile" method="get">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="form-floating mb-3">
                <input id="username" type="text" value="@_username" class="form-control" placeholder="Please choose your username." readonly />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <input id="username" type="text" value="@_phoneNumber" class="form-control" placeholder="Please choose your phone." readonly />
                <label for="username" class="form-label">Phone</label>
            </div>

        </EditForm>

        @if (_hasUserData)
        {
            <EditForm Model="_user.DataUsers" FormName="userData" method="get">
                <div class="form-group">
                    <label>First Name</label>
                    <input class="form-control" value="@_user.DataUsers?.UserFirstName" readonly />
                </div>

                <div class="form-group">
                    <label>Surname</label>
                    <input type="text" class="form-control" value="@_user.DataUsers?.UserSurname" readonly />
                </div>
                <div class="form-group">
                    <label>Country</label>
                    <input type="text" class="form-control" value="@_user.DataUsers?.UserCountry" readonly />
                </div>
                <div class="form-group">
                    <label>Town</label>
                    <input type="text" class="form-control" value="@_user.DataUsers?.UserTown" readonly />
                </div>
                <div class="form-group">
                    <label>Street</label>
                    <input type="text" class="form-control" value="@_user.DataUsers?.UserStreet" readonly />
                </div>
                @if (_user.DataUsers.UserHomeNumber.HasValue)
                {
                    <div class="form-group">
                        <label>Home Number</label>
                        <input type="text" class="form-control" value="@_user.DataUsers.UserHomeNumberString" readonly />
                    </div>
                }
                else if (!string.IsNullOrEmpty(_user.DataUsers.UserFlatNumber))
                {
                    <div class="form-group">
                        <label>Flat Number</label>
                        <input type="text" class="form-control" value="@_user.DataUsers.UserFlatNumber" readonly />
                    </div>
                }

            </EditForm>
        }
    </div>
</div>

@code {
    private ApplicationUser _user = default!;
    private string? _username;
    private string? _phoneNumber;
    private bool _hasUserData;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private ApplicationUser Input { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();

        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _username = await UserManager.GetUserNameAsync(_user);
        _phoneNumber = await UserManager.GetPhoneNumberAsync(_user);

        Input.PhoneNumber ??= _phoneNumber;

        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        using (var scope = ServiceProvider.CreateScope())
        {
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            var userData = await dbContext.DataUsers
                           .FirstOrDefaultAsync(du => du.UserId == _user.Id);
            _user.DataUsers = userData;
        }
        _hasUserData = _user?.DataUsers != null;
    }

}
