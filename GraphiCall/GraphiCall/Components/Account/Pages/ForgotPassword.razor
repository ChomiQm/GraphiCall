@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GraphiCall.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<ForgotPassword> Logger
@inject ApplicationDbContext dbContext
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot Password</PageTitle>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-success">@Message</div>
}

<h1>Forgot Password</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" FormName="ForgotPassword" OnValidSubmit="HandleForgotPassword">
            <DataAnnotationsValidator />
            <h2>Reset your password.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Send password reset link</button>
        </EditForm>
    </div>
</div>

@code {
    private string? Message { get; set; }


    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private async Task HandleForgotPassword()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user == null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            Message = "If your account exists and is confirmed, we have sent a password reset link to your email.";
            return;
        }

        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.ToAbsoluteUri($"/Account/ResetPassword?code={code}").ToString();

        try
        {
            await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, callbackUrl);
            Logger.LogInformation($"Password reset link sent to {Input.Email}");
            Message = "Check your email for a password reset link.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sending password reset link.");
            Message = "Error sending password reset link. Please try again later.";
        }
    }

    private class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
    }
}
